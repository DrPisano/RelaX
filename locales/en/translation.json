{
	"db": {
		"messages": {
			"parser": {
				"error-duplicate-variable": "duplicate variable name: __name__",
				"error-invalid-date-format": "\"__str__\"  is not a valid date; expected format: YYYY-MM-DD",
				"error-group-duplicate-header": "duplicate header __name__",
				"error-group-unknown-header": "unknown header __name__",
				"error-group-header-name-missing": "the name of the group is missing (group: ....)",
				"error-group-header-name-empty": "the name of the group must not be empty",
				"error-group-non-unique-attribute": "non unique attribute __name__ in column __index__",
				"error-sql-string-use-single-quotes": "use single quotes for strings",
				"error-sql-invalid-relation-name": "\"__str__\" must not be used as a relation-name",
				"error-sql-invalid-column-name": "\"__str__\" must not be used as a column-name",
				"error-sql-group-by-missing": "group by is missing",
				"error-sql-having-without-group-by": "having found but missing \"group by\" or aggregation",
				"error-sql-negative-limit": "the limit given must be >= 0",
				"error-sqldump-invalid-column-number": "invalid number of columns in line __line__",
				"error-sqldump-invalid-type": "invalid type in line  __line__",
				"error-sqldump-insert-wrong-number-columns": "number of values != number of columns",
				"error-valueexpr-like-operand-no-string": "right operand of LIKE must be a string literal"
			},
			"exec": {
				"error-column-not-unique": "could not add column \"__column__\" because of ambiguity",
				"error-column-not-found-name": "could not find column \"__column__\" in schema __schema__",
				"error-column-not-found-index": "column index \"__column__\" is out of range in schema __schema__; index starts at 1",
				"error-column-ambiguous": "column \"__column__\" is ambiguous in schema __schema__",
				"error-column-index-out-of-range": "column index \"__column__\" is out of range in schema __schema__; index starts at 1",
				"error-could-not-change-rel-alias-ambiguity": "could not set relation alias \"__alias__\" because of ambiguity",
				"error-could-not-rename-ambiguity": "could not set new name \"__newName__\" for \"__oldName__\" because of ambiguity in schema __schema__",
				"error-schema-a-not-part-of-schema-b": "schema __schemaA__ is not part of __schemaB__",
				"error-schemas-not-unifiable": "schemas are not unifiable: types are different or size is different: __schemaA__  and __schemaB__",
				"error-column-not-in-both-schemas": "column \"__column__\" can not be found in both schemas of join",
				"error-condition-must-be-boolean": "condition must be a boolean expression",
				"error-func-not-defined-for-column-type": "__func__ not defined for type __colType__",
				"error-join-would-produce-non-unique-columns": "join would result in non unique column names; the following columns appear in both relations: __conflicts__",
				"error-no-columns-match-alias-star": "no columns match \"__alias__.*\"",
				"error-datatype-not-specified-for-col": "datatype for column __index__ (\"__column__\") is not specified",
				"error-invalid-projection-error": "invalid projection \"__argument__\": __error__",
				"error-function-expects-type": "function \"__func__\" expects arguments of type \"__expected__\" but \"__given__\" given",
				"error-could-not-compare-different-types": "could not compare value if types are different: __typeA__ != __typeB__",
				"error-function-expects-arguments-of-same-type": "__func__ expects all arguments to be of the same type",
				"error-case-when-condition-must-be-boolean": "the condition of a CASE WHEN must be of type boolean",
				"error-case-when-expects-results-of-same-type": "<i>CASE WHEN condition THEN result END</i> expects all <i>results<i/> to be of the same type",
				"error-invalid-date-format": "\"__str__\"  is not a valid date; expected format: YYYY-MM-DD"
			},
			"translate": {
				"error-relation-not-found": "could not find relation \"__name__\"",
				"warning-distinct-missing": "DISTINCT is missing; relational algebra uses implicit duplicate elimination",
				"warning-ignored-all-on-set-operators": "ignored ALL on set operation; relational algebra uses implicit duplicate elimination",
				"error-variable-name-conflict": "name conflict: relation name \"__name__\" already exists",
				"error-variable-cyclic-usage": "cyclic usage of variable \"__name__\" detected"
			}
		}
	},
	"editor": {
		"codemirror-placeholder": [
			"your query goes here ...",
			"",
			"keyboard shortcuts:",
			"\texecute statement:    [CTRL]+[RETURN]",
			"\texecute selection:    [CTRL]+[SHIFT]+[RETURN]",
			"\tautocomplete:         [CTRL]+[SPACE]"
		],
		"alert-message-headers": {
			"success": "Success",
			"info": "Info",
			"warning": "Warning",
			"error": "Error"
		},
		"inline-relation-editor": {
			"button-ok": "ok",
			"button-cancel": "cancel",
			"placeholder-column-name-and-types": "columnName:type",
			"enter-your-data": "please enter your data",
			"error-column-name-missing": "column name missing in column __index__",
			"error-wrong-quoted-string": "string must not contain single and double quotes"
		},
		"error-no-query-found": "no query found",
		"pegjs-error": {
			"or": "or",
			"no-input-found": "no input found",
			"end-of-input": "end of input",
			"expected-found": "Expected __expected__ but __found__ found."
		},
		"error-at-line-x": "at line __line__"
	},
	"calc": {
		"messages": {
			"error-query-missing": "no query found",
			"error-query-missing-assignments-found": "only assignments found; query is missing <a href=\"help.htm#relalg-assignment\" target=\"_blank\">Help - Assignments</a>",
			"gist-load-success": "gist loaded successfully"
		},
		"menu": {
			"headline": "load a Dataset",
			"load-gist-headline": "Load dataset stored in a gist",
			"load-gist-button": "load",
			"load-gist-insert-placeholder": "gist ID",
			"create-own-dataset-headline": "Create your own Dataset",
			"create-own-dataset-text": [
				"You can create your own dataset and share it with others. ",
				"Learn more about it in the <a href=\"help.htm#tutorial-maintainer\">Maintainer Tutorial</a>"
			],
			"create-own-dataset-button-new": "create new Dataset",
			"create-own-dataset-button-modify": "modify current Dataset"
		},
		"navigation": {
			"take-a-tour": "Take a Tour",
			"feedback": "Feedback",
			"help": "Help",
			"language": "Language",
			"language-warning-reload-required": "reloads the page!"
		},
		"maintainer-groups": {
			"misc": "Miscellaneous",
			"temp": "Temporary",
			"uibk": "University of Innsbruck"
		},
		"editors": {
			"button-history": "history",
			"group": {
				"tab-name": "Group Editor",
				"toolbar": {
					"import-sql": "import SQL-dump",
					"import-sql-content": "import SQL-content",
					"add-new-relation": "add new relation",
					"add-new-relation-content": "open relation editor"
				},
				"button-download": "download",
				"button-preview": "preview",
				"button-use": "use Group in editor",
				"button-use_plural": "use Groups in editor",
				"sql-import-group-name-placeholder": "Name of the group (imported from SQL)",
				"new-group-example-group": "-- this is an example\n\ngroup: nameOfTheNewGroup \n\n\nA = {\n\ta:string, b:number\n\texample,  42\n}",
				"modal-sqldump": {
					"modal-title": "Import SQL-Dump",
					"button-close": "Close",
					"button-cancel": "cancel",
					"button-import-sql": "import SQL",
					"description": "Put your SQL-Dump here to create a group."
				}
			},
			"ra": {
				"tab-name": "Relational Algebra",
				"button-execute-query": "execute query",
				"button-execute-selection": "execute selection",
				"button-download": "download",
				"toolbar": {
					"projection": "projection",
					"projection-content": [
						"<b class=\"math\">&pi;</b> a, b <b>(</b> A <b>)</b>",
						"<br><b>pi</b> a, b A"
					],
					"selection": "selection",
					"selection-content": [
						"<b class=\"math\">&sigma;</b> a < b ∧ b <span class=\"math\">≠<span> c <b>(</b> A <b>)</b>",
						"<br><b>sigma</b> a < b and b != c A"
					],
					"rename": "rename relation / rename columns",
					"rename-content": [
						"<div><span class=\"math\">&sigma;</span> x.a > 1 ( <b class=\"math\">&rho;</b> x <b>(</b> A <b>)</b> )</div>",
						"<div class=\"math\">&sigma; A.y > 2 ( <b class=\"math\">rho</b> y<b class=\"math\">←</b>a <b>(</b> A <b>)</b> )</div>"
					],
					"rename-columns-operator": "rename columns operator",
					"rename-columns-operator-content": "<div class=\"math\">&sigma; A.y > 2 ( <b>&rho;</b> y<b class=\"math\">←</b>a <b>(</b> A <b>)</b> )</div>",
					"orderBy": "order by",
					"orderBy-content": "<div><b class=\"math\">&tau;</b> a asc, [2] desc <b> (</b> A <b>)</b><div><div><b class=\"math\">tau</b> a asc, [2] desc <b> (</b> A <b>)</b></div>",
					"groupBy": "group by",
					"groupBy-content": [
						"<div><b class=\"math\">&gamma;</b> a, b<b>;</b> count(c)→c ( A )</div>",
						"<div><b class=\"math\">gamma</b> count(a)->x, sum(b)->y ( A )</div>"
					],
					"and": "and",
					"and-content": "<div><span class=\"math\">&sigma;</span> a < b <b class=\"math\">∧</b> b <span class=\"math\">≠</span> c ( A )</div>",
					"xor": "xor",
					"xor-content": "<div><span class=\"math\">&sigma;</span> a < b <b class=\"math\">⊕</b> b <span class=\"math\">≠</span> c ( A )</div>",
					"or": "or",
					"or-content": "<div><span class=\"math\">&sigma;</span> a < b <b class=\"math\">∨</b> b <span class=\"math\">≠</span> c ( A )</div>",
					"not": "not",
					"not-content": "<div>&sigma; <b>¬</b>(a < b) ( A )</div>",
					"equals": "equals",
					"equals-content": "<div>&sigma; a <b>=</b> b ( A )</div>",
					"not-equals": "not equals",
					"not-equals-content": "<div>&sigma; a <b>≠</b> 'text' ( A )</div>",
					"greater-or-equals": "greater or equals",
					"greater-or-equals-content": "<div>&sigma; a <b>≥</b> 42 ( A )</div>",
					"lesser-or-equals": "lesser or equals",
					"lesser-or-equals-content": "<div>&sigma; a <b>≤</b> 42 ( A )</div>",
					"intersect": "intersect",
					"intersect-content": "<div><b>(</b> A <b>) <span class=\"math\">&cap;</span> (</b> B <b>)</b></div>",
					"union": "union",
					"union-content": "<div><b>(</b> A <b>) <span class=\"math\">&cup;</span> (</b> B <b>)</b></div>",
					"division": "division",
					"division-content": "<div><b>(</b> A <b>) ÷ (</b> B <b>)</b></div>",
					"subtraction": "subtraction",
					"subtraction-content": [
						"<div><b>(</b> A <b>) - (</b> B <b>)</b></div>",
						"<div><b>(</b> A <b>) \\ (</b> B <b>)</b></div>"
					],
					"cross-join": "cross join",
					"cross-join-content": "<div><b>(</b> A <b>) <b class=\"math\">⨯</b> (</b> B <b>)</b></div>",
					"natural-join": "natural join / θ-join",
					"natural-join-content": [
						"<div><b>(</b> A <b>) <b class=\"math\">⋈</b> (</b> B <b>)</b></div>",
						"<div><b>(</b> A <b class=\"math\">) ⋈ A.a ≥ B.a (</b> B <b>)</b></div>"
					],
					"left-outer-join": "left outer join",
					"left-outer-join-content": [
						"<div><b>(</b> A <b class=\"math\">) ⟕ (</b> B <b>)</b></div>",
						"<div><b>(</b> A <b class=\"math\">) ⟕ A.a < B.a (</b> B <b>)</b></div>"
					],
					"right-outer-join": "right outer join",
					"right-outer-join-content": [
						"<div><b>(</b> A <b class=\"math\">) ⟖ (</b> B <b>)</b></div>",
						"<div><b>(</b> A <b class=\"math\">) ⟖ A.a < B.a (</b> B <b>)</b></div>"
					],
					"full-outer-join": "full outer join",
					"full-outer-join-content": [
						"<div><b>(</b> A <b class=\"math\">) ⟗ (</b> B <b>)</b></div>",
						"<div><b>(</b> A <b class=\"math\">) ⟗ A.a != B.a (</b> B <b>)</b></div>"
					],
					"left-semi-join": "left semi join",
					"left-semi-join-content": "<div><b>(</b> A <b class=\"math\">) ⋉ (</b> B <b>)</b></div>",
					"right-semi-join": "right semi join",
					"right-semi-join-content": "<div><b>(</b> A <b class=\"math\">) ⋊ (</b> B <b>)</b></div>",
					"anti-join": "anti join",
					"anti-join-content": "<div><b>(</b> A <b class=\"math\">) ▷ (</b> B <b>)</b></div>",
					"assignment": "assignment",
					"assignment-content": [
						"<div><b>X = </b> pi a ( A )",
						"<br /><b>Y = </b> pi b ( b )",
						"<br />( X ) <span class=\"math\">&cup;</span> ( Y )<br /></div>"
					],
					"single-line-comment": "single-line comment",
					"single-line-comment-content": "<span class=\"math\">&pi;</span> a, b A <b>-- useful comment</b>",
					"multi-line-comment": "multi-line comment",
					"multi-line-comment-content": "<b>/* this is a very,<br>very long comment */</b><br><span class=\"math\">&pi;</span> a, b A",
					"inline-relation": "inline-relation",
					"inline-relation-content": "&sigma; a = 'test' (<b>{<br>a:string, b:number, X.c:date<br>a, 1, 1970-01-01<br>}</b>)",
					"inline-relation-editor": "inline-relation (editor)",
					"inline-relation-editor-content": "create a new inline-relation using a built in editor",
					"insert-date": "insert date",
					"insert-date-content": [
						"<span class=\"math\">&sigma;</span> a &lt; <b>date('1970-01-01')</b> ( A )"
					]
				}
			},
			"sql": {
				"tab-name": "SQL",
				"button-execute-query": "execute query",
				"button-execute-selection": "execute selection",
				"button-download": "download",
				"toolbar": {
					"select": "select clause",
					"select-content": "<p>SELECT * FROM A</p><div>SELECT a, A.b, A.c FROM A</div>",
					"from": "from clause",
					"from-content": "<div>SELECT * <br>FROM A, B as b<br>INNER JOIN C NATURAL</div>",
					"where": "where  clause",
					"where-content": "SELECT * FROM A, B <br>where A.a = B.a or false",
					"group-by": "group by clause",
					"group-by-content": "SELECT a, COUNT(b) as num <br>FROM A <br>GROUP BY a",
					"having": "having  clause",
					"having-content": "SELECT a, SUM(b) as sum <br>FROM A <br>GROUP BY a<br>having sum > 10",
					"order-by": "order by  clause",
					"order-by-content": "<p>SELECT * FROM A ORDER BY a asc, b desc</p><div>SELECT * FROM A ORDER BY 1, 2, 3</div>",
					"limit": "limit clause",
					"limit-content": "SELECT * FROM A <br>LIMIT 10 OFFSET 0",
					"insert-date": "insert date",
					"insert-date-content": [
						"select * from A",
						"where a &lt; <b>date('1970-01-01')</b>"
					]
				}
			}
		},
		"tour": {
			"welcome": "Welcome to RelaX, the relational algebra calculator",
			"choose-dataset-here": "you can choose your dataset here",
			"currently-loaded-datasets": "these are the currently loaded datasets",
			"load-dataset-via-gist": "<p>you can also load a dataset that was shared via a <a href=\"https://gist.github.com/\" target=\"_blank\">GitHub Gist</a></p>",
			"relation-attributes": "here are the attributes of each relation and their datatype<br>just click to add them to the editor",
			"ra-toolbar": "the relalg operators can be inserted here<br>or you can use the <a href=\"help.htm#tutorial-user-plain-text-notation\" target=\"_blank\">alternative syntax</a>",
			"ra-statement-goes-here": "the relational algebra statement goes here",
			"ra-example-query": "this is a simple example statement using a projection, selection and a natural join",
			"ra-example-query-plaintext": "this is the very same example using the <a href=\"help.htm#tutorial-user-plain-text-notation\" target=\"_blank\">alternative plaintext syntax</a>",
			"ra-example-execute-it": "lets execute it to see the result",
			"ra-example-result": "this is the current statement and the actual result",
			"ra-example-operator-tree": "<p>this is the operator tree of the relational algebra statement.</p><p>You can click on every node to get the intermediate result.</p>",
			"switch-to-sql": "<p>you can also switch to the SQL editor</p>",
			"sql-example-query": "this is the example statement you saw before, this time in SQL",
			"sql-example-execute-it": "lets execute it to see the result",
			"sql-example-result": "<p>the SQL-statement gets translated into relational algebra and you can see the operator-tree, the relalg formula and the result.</p>",
			"end": [
				"<p>You should now know the very basics of the tool.</p><p>You can find more information on the ",
				"<a href=\"help.htm\" target=\"_blank\">Help page</a> like:",
				"</p><ul>",
				"<li><a href=\"help.htm#tutorial-user\" target=\"_blank\">a short tutorial for users explaining the basics</a></li>",
				"<li><a href=\"help.htm#relalg-reference\" target=\"_blank\">a complete reference of the supported relalg operators and the used syntax</a></li>",
				"<li><a href=\"help.htm#relalg-reference\" target=\"_blank\">a complete reference of the supported SQL subset and the supported syntax</a></li>",
				"<li><a href=\"help.htm#tutorial-maintainer\" target=\"_blank\">a short tutorial about how to create a new dataset for others</a></li>",
				"</ul>"
			]
		}
	}
}
